package main

import (
	"bufio"
	"fmt"
	"local/config"
	"local/logger"
	"os"
	"strings"
	"time"

	"github.com/go-resty/resty/v2"
)

// –ö–ª–∏–µ–Ω—Ç –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
type ClientReq struct {
	request *resty.Client
}

// POST JSON (API)
func (c *ClientReq) PostJSON(url, longURL string) (string, int, error) {
	response, err := c.request.R().
		SetHeader("Content-Type", "application/json").
		SetBody(map[string]string{"url": longURL}).
		Post(url)

	if err != nil {
		logger.Log.Errorf("error: %s", err.Error())
		return "", 0, err
	}

	if response.StatusCode() != 200 && response.StatusCode() != 201 {
		logger.Log.Errorf("Server returned error: %s, %v", response.Status(), response.String())
		return "", response.StatusCode(), fmt.Errorf("server error: %s", response.String())
	}

	return response.String(), response.StatusCode(), nil
}

// POST FormData (–æ–±—ã—á–Ω—ã–π POST-–∑–∞–ø—Ä–æ—Å)
func (c *ClientReq) PostFormData(url, longURL string) (string, int, error) {
	response, err := c.request.R().
		SetHeader("Content-Type", "application/x-www-form-urlencoded").
		SetFormData(map[string]string{"url": longURL}).
		Post(url)

	if err != nil {
		logger.Log.Errorf("error: %s", err.Error())
		return "", 0, err
	}

	if response.StatusCode() != 200 && response.StatusCode() != 201 {
		logger.Log.Errorf("Server returned error: %s, %v", response.Status(), response.String())
		return "", response.StatusCode(), fmt.Errorf("server error: %s", response.String())
	}

	return response.String(), response.StatusCode(), nil
}

// GET /ping ‚Äì –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
func (c *ClientReq) GetPing(url string) (string, int, error) {
	response, err := c.request.R().Get(url)

	if err != nil {
		logger.Log.Errorf("Ping error: %s", err.Error())
		return "", 0, err
	}

	return response.String(), response.StatusCode(), nil
}

// GET /{shortURL} ‚Äì –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
func (c *ClientReq) GetShortURL(url string) (string, int, error) {
	response, err := c.request.R().Get(url)

	if err != nil {
		logger.Log.Errorf("GET error: %s", err.Error())
		return "", 0, err
	}

	return response.String(), response.StatusCode(), nil
}

// –ß—Ç–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ URL —Å –∫–æ–Ω—Å–æ–ª–∏
func readLongURL() (string, error) {
	fmt.Println("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω–Ω—ã–π URL:")
	reader := bufio.NewReader(os.Stdin)
	long, err := reader.ReadString('\n')
	long = strings.TrimSpace(long)
	if err != nil {
		return "", err
	}
	return long, nil
}

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ª–æ–≥–≥–µ—Ä–∞
	cfg := config.InitConfig()
	logger.InitLogger(cfg.LogLevel)
	defer logger.CloseLogger()

	logger.Log.Info("Starting client")

	// –ß—Ç–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ URL
	longURL, err := readLongURL()
	if err != nil {
		logger.Log.Fatalf("error: %s", err.Error())
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞
	client := resty.New()
	client.SetTimeout(500 * time.Millisecond)
	postClient := &ClientReq{request: client}

	var response string
	var statusCode int

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏
	fmt.Println("\n=== –¢–ï–°–¢–ò–†–£–ï–ú –°–ï–†–í–ï–† ===")

	// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å–µ—Ä–≤–µ—Ä (GET /ping)
	fmt.Println("\nüîπ –¢–µ—Å—Ç: GET /ping")
	response, statusCode, err = postClient.GetPing(cfg.BaseURL + "/Ph-VaNhL")
	if err == nil {
		fmt.Printf("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω! –û—Ç–≤–µ—Ç: %s (–ö–æ–¥: %d)\n", response, statusCode)
	} else {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ ping: %v\n", err)
	}

	// 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ URL —á–µ—Ä–µ–∑ JSON (POST /api/shorten)
	fmt.Println("\nüîπ –¢–µ—Å—Ç: POST /api/shorten (JSON)")
	response, statusCode, err = postClient.PostJSON(cfg.BaseURL+"/api/shorten", longURL)
	if err == nil {
		fmt.Printf("‚úÖ –ö–æ—Ä–æ—Ç–∫–∏–π URL —Å–æ–∑–¥–∞–Ω: %s (–ö–æ–¥: %d)\n", response, statusCode)
	} else {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è JSON URL: %v\n", err)
	}

	// 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ URL —á–µ—Ä–µ–∑ FormData (POST /)
	fmt.Println("\nüîπ –¢–µ—Å—Ç: POST / (FormData)")
	response, statusCode, err = postClient.PostFormData(cfg.BaseURL+"/", longURL)
	if err == nil {
		fmt.Printf("‚úÖ –ö–æ—Ä–æ—Ç–∫–∏–π URL —Å–æ–∑–¥–∞–Ω: %s (–ö–æ–¥: %d)\n", response, statusCode)
	} else {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è FormData URL: %v\n", err)
	}

	// 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É URL (GET /{shortURL})
	if statusCode == 201 || statusCode == 200 {
		shortURL := strings.Trim(response, `"`) // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª JSON —Å—Ç—Ä–æ–∫—É
		fmt.Println("\nüîπ –¢–µ—Å—Ç: GET " + shortURL)

		response, statusCode, err = postClient.GetShortURL(cfg.BaseURL + "/" + shortURL)
		if err == nil {
			fmt.Printf("‚úÖ –†–µ–¥–∏—Ä–µ–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–≤–µ—Ç: %s (–ö–æ–¥: %d)\n", response, statusCode)
		} else {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–µ: %v\n", err)
		}
	}

	// 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π URL (–æ—à–∏–±–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
	fmt.Println("\nüîπ –¢–µ—Å—Ç: GET /unknown_path")
	response, statusCode, err = postClient.GetShortURL(cfg.BaseURL + "/unknown_path")
	if err == nil {
		fmt.Printf("‚úÖ –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –æ–∂–∏–¥–∞–µ–º–æ: %s (–ö–æ–¥: %d)\n", response, statusCode)
	} else {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø—É—Ç–∏: %v\n", err)
	}

	fmt.Println("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
}
